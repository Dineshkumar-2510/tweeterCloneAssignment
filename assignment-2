const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const databasePath = path.join(__dirname, "userData.db");

const app = express();

app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

const authenticateToken = (request, response, next) => {
  const { tweet } = request.body;
  const { tweetId } = request.params;
  let jwtToken;
  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "MY_SECRET_TOKEN", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        request.payload = payload;
        request.tweet = tweet;
        request.tweetId = tweetId;
        next();
      }
    });
  }
};

app.post("/register", async (request, response) => {
  const { username, password, name, gender } = request.body;

  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}';`;
  console.log(username, password, name, gender);
  const databaseUser = await database.get(selectUserQuery);

  if (databaseUser !== undefined) {
    response.status(400);
    response.send("User already exists");
  } else {
    if (password.length < 6) {
      response.status(400);
      response.send("Password is too short");
    } else {
      const hashedPassword = await bcrypt.hash(password, 10);
      const createUserQuery = `
     INSERT INTO
      user (username, name, password, gender)
     VALUES
      (
       '${username}',
       '${name}',
       '${hashedPassword}',
       '${gender}'  
      );`;
      await database.run(createUserQuery);
      response.send("User created successfully");
    }
  }
});

app.post("/login/", async (request, response) => {
  const { username, password } = request.body;
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}';`;
  console.log(username, password);
  const databaseUser = await database.get(selectUserQuery);
  console.log(databaseUser);
  if (databaseUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(
      password,
      databaseUser.password
    );
    if (isPasswordMatched === true) {
      const payload = {
        username: username,
      };
      const jwtToken = jwt.sign(payload, "MY_SECRET_TOKEN");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});

app.get("/user/tweets/feed", authenticateToken, async (request, response) => {
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name);
  const getTweetsFeedQuery = `
        select username, tweet, date_time as dateTime
        from follower inner join tweet on follower.following_user_id = tweet.user_id inner join user on user.user_id = follower.follower_user_id
        where follower.follower_user_id = ${user_id}
        order by date_time desc
        limit 4;`;
  const tweetFeedArray = await database.all(getTweetsFeedQuery);
  response.send(tweetFeedArray);
});

app.get("/user/following", authenticateToken, async (request, response) => {
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name);
  const userFollowsQuery = `
        select name
        from user inner join follower on user.user_id = follower.following_user_id
        where follower.follower_user_id = ${user_id};`;
  const userFollowsArray = await database.all(userFollowsQuery);
  response.send(userFollowsArray);
});

app.get("/user/followers", authenticateToken, async (request, response) => {
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name);
  const userFollowersQuery = `
        select name
        from user inner join follower on user.user_id = follower.follower_user_id
        where follower.following_user_id = ${user_id};`;
  const userFollowersArray = await database.all(userFollowersQuery);
  response.send(userFollowersArray);
});

app.get("/tweets/tweetId", authenticateToken, async (request, response) => {
  const { tweetId } = request;
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name, tweetId);
  const tweetsQuery = `
        select * from tweet where tweet_id = ${tweetId};`;
  const tweetsResult = await database.all(tweetsQuery);

  const userFollowersQuery = ` 
    select *
    from follower inner join user on user.user_id = follower.following_user_id
    where follower.follower_user_id = ${user_id};`;
  const userFollowers = await database.all(userFollowersQuery);

  if (
    userFollowers.some(
      (item) => item.following_user_id === tweetsResult.user_id
    )
  ) {
    console.log(tweetsResult);
    console.log("___________");
    console.log(userFollowers);
    const getTweetDetailsQuery = `
        select 
            tweet,
            count(distinct(like.like_id)) as likes,
            count(distinct(reply.reply_id)) as replies,
            tweet.date_time as dateTime
        from 
            tweet inner join like on tweet.tweet_id = like.tweet_id inner join reply on reply.tweet_id = tweet.tweet_id
        where 
            tweet.tweet_id = ${tweet_id} and tweet.user_id = ${userFollowers[0].user_id};`;
    const tweetDetails = await database.get(getTweetDetailsQuery);
    response.send(tweetDetails);
  } else {
    response.status(401);
    response.send("Invalid Request");
  }
});

app.get(
  "/tweets/tweetId/likes",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request;
    const { payload } = request;
    const { user_id, name, username, gender } = payload;
    console.log(name, tweetId);
    const getLikedUsersQuery = `
        select 
            * 
        from 
            follower inner join tweet on tweet.user_id = follower.following_user_id inner join like on like.tweet_id = tweet.tweet_id inner join user on user.user_id = like.user_id
        where 
            tweet.tweet_id = ${tweetId} and follower.follower_user_id = ${user_id};`;
    const likedUsers = await database.all(getLikedUsersQuery);
    console.log(likedUsers);

    if (likedUsers.length !== 0) {
      let likes = [];
      const getNamesArray = (likedUsers) => {
        for (let item of likedUsers) {
          likes.push(item.username);
        }
      };
      getNamesArray(likedUsers);
      response.send({ likes });
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

app.get(
  "/tweets/tweetId/replies",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request;
    const { payload } = request;
    const { user_id, name, username, gender } = payload;
    console.log(name, tweetId);
    const getRepliedUsersQuery = `
        select 
            * 
        from 
            follower inner join tweet on tweet.user_id = follower.following_user_id inner join reply on reply.tweet_id = tweet.tweet_id inner join user on user.user_id = reply.user_id
        where 
            tweet.tweet_id = ${tweetId} and follower.follower_user_id = ${user_id};`;
    const repliedUsers = await database.all(getRepliedUsersQuery);
    console.log(repliedUsers);

    if (repliedUsers.length !== 0) {
      let replies = [];
      const getNamesArray = (repliedUsers) => {
        for (let item of repliedUsers) {
          let object = {
            name: item.name,
            reply: item.reply,
          };
          replies.push(object);
        }
      };
      getNamesArray(repliedUsers);
      response.send({ replies });
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

app.get("/users/tweets", authenticateToken, async (request, response) => {
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name, user_id);
  const getTweetsDetailsQuery = `
        select 
            tweet.tweet as tweet,
            count(distinct(like.like_id)) as likes,
            count(distinct(reply.reply_id)) as replies,
            tweet.date_time as dateTime
        from user inner join tweet on user.user_id = tweet.user_id inner join like on like.tweet_id = tweet.tweet_id inner join reply on reply.tweet_id = tweet.tweet_id
        where user.user_id = ${user_id}
        group by tweet.tweet_id;`;

  const tweetsDetails = await database.get(getTweetsDetailsQuery);
  response.send(tweetsDetails);
});

app.get("/users/tweets", authenticateToken, async (request, response) => {
  const { tweet } = request;
  const { tweetId } = request;
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name, tweetId);
  const postTweetQuery = `
        insert into 
            tweet (tweet, user_id)
        values(
            '${tweet}',
            ${user_id}
        ):    `;
  await database.run(postTweetQuery);
  response.send("Created a Tweet");
});

app.get("/tweets/tweetId", authenticateToken, async (request, response) => {
  const { tweetId } = request;
  const { payload } = request;
  const { user_id, name, username, gender } = payload;
  console.log(name, tweetId);
  const selectUserQuery = `
        select * 
        from tweet
        where tweet.user_id = ${user_id} and tweet.tweet_id = ${tweetId};`;
  const tweetUser = await database.all(selectUserQuery);

  if (tweetUser.length !== 0) {
    const deleteTweetQuery = `
        delete from tweet
        where tweet.user_id = ${user_id} and tweet.tweet_id = ${tweetId};`;
    await database.run(deleteTweetQuery);
    response.send("Tweet Removed");
  } else {
    response.status(401);
    response.send("Invalid Request");
  }
});

module.exports = app;
