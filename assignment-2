const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const databasePath = path.join(__dirname, "twitterClone.db");

const app = express();

app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

const authenticateToken = (request, response, next) => {
  let jwtToken;
  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "MY_SECRET_TOKEN", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        request.username = payload.username;
        next();
      }
    });
  }
};

const tweetAccessVerification = async (request, response, next) => {
  const { userId } = request;
  const { tweetId } = request.params;

  const getTweetQuery = `
        SELECT 
          *
        FROM 
          tweet INNER JOIN follower ON tweet.user_id  = follower.following_user_id
        WHERE 
          tweet.tweet_id = '${tweetId}' AND follower.follower_user_id = '${userId}'  ;`;
  const tweet = await database.get(getTweetQuery);
  if (tweet === undefined) {
    response.status(401);
    response.send("Invalid Request");
  } else {
    next();
  }
};

app.post("/register", async (request, response) => {
  const { username, password, name, gender } = request.body;

  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}';`;
  console.log(username, password, name, gender);
  const databaseUser = await database.get(selectUserQuery);

  if (databaseUser !== undefined) {
    response.status(400);
    response.send("User already exists");
  } else {
    if (password.length < 6) {
      response.status(400);
      response.send("Password is too short");
    } else {
      const hashedPassword = await bcrypt.hash(password, 10);
      const createUserQuery = `
     INSERT INTO
      user (username, name, password, gender)
     VALUES
      (
       '${username}',
       '${name}',
       '${hashedPassword}',
       '${gender}'  
      );`;
      await database.run(createUserQuery);
      response.send("User created successfully");
    }
  }
});

app.post("/login/", async (request, response) => {
  const { username, password } = request.body;
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}';`;
  console.log(username, password);
  const databaseUser = await database.get(selectUserQuery);
  console.log(databaseUser);
  if (databaseUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(
      password,
      databaseUser.password
    );
    if (isPasswordMatched === true) {
      const payload = {
        username: username,
      };
      const jwtToken = jwt.sign(payload, "MY_SECRET_TOKEN");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});

app.get("/user/tweets/feed", authenticateToken, async (request, response) => {
  let { username } = request;
  const getUserIdQuery = `select user_id from user where username = '${username}';`;
  const getUserId = await database.get(getUserIdQuery);
  // console.log(getUserId);

  const getFollowerIdsQuery = ` select following_user_id from follower where follower_user_id = ${getUserId.user_id};`;
  const getFollowerIds = await database.all(getFollowerIdsQuery);
  //console.log(getFollowerIds);

  const getFollowerIdsSimple = getFollowerIds.map((eachUser) => {
    return eachUser.following_user_id;
  });

  const getTweetsFeedQuery = `
        select user.username, tweet.tweet, tweet.date_time as dateTime
        from user inner join tweet on user.user_id = tweet.user_id
        where user.user_id in (${getFollowerIdsSimple})
        order by tweet.date_time desc
        limit 4;`;
  const tweetFeedArray = await database.all(getTweetsFeedQuery);
  response.send(tweetFeedArray);
});

app.get("/user/following", authenticateToken, async (request, response) => {
  let { username } = request;
  const getUserIdQuery = `select user_id from user where username = '${username}';`;
  const getUserId = await database.get(getUserIdQuery);
  // console.log(getUserId);

  const getFollowerIdsQuery = ` select following_user_id from follower where follower_user_id = ${getUserId.user_id};`;
  const getFollowerIdsArray = await database.all(getFollowerIdsQuery);
  //console.log(getFollowerIdsArray);

  const getFollowerIds = getFollowerIdsArray.map((eachUser) => {
    return eachUser.following_user_id;
  });

  const userFollowsQuery = `
        select name
        from user
        where user_id in (${getFollowerIds});`;
  const userFollowsArray = await database.all(userFollowsQuery);
  response.send(userFollowsArray);
});

app.get("/user/followers", authenticateToken, async (request, response) => {
  let { username } = request;
  const getUserIdQuery = `select user_id from user where username = '${username}';`;
  const getUserId = await database.get(getUserIdQuery);
  // console.log(getUserId);

  const getFollowerIdsQuery = ` select follower_user_id from follower where following_user_id = ${getUserId.user_id};`;
  const getFollowerIdsArray = await database.all(getFollowerIdsQuery);
  //console.log(getFollowerIdsArray);

  const getFollowerIds = getFollowerIdsArray.map((eachUser) => {
    return eachUser.follower_user_id;
  });

  const userFollowsQuery = `
        select name
        from user
        where user_id in (${getFollowerIds});`;
  const userFollowsArray = await database.all(userFollowsQuery);
  response.send(userFollowsArray);
});

app.get(
  "/tweets/:tweetId/",
  authenticateToken,
  tweetAccessVerification,
  async (request, response) => {
    const { username, userId } = request;
    const { tweetId } = request.params;

    const getTweetQuery = `
    SELECT 
        tweet,
        (SELECT COUNT() FROM like WHERE tweet_id = '${tweetId}') AS likes,
        (SELECT COUNT() FROM reply WHERE tweet_id = '${tweetId}') AS replies,
        date_time AS dateTime
    FROM 
        tweet
    WHERE 
        tweet_id = '${tweetID}' ;`;
    const tweet = await database.get(getTweetQuery);
    response.send(tweet);
  }
);

app.get(
  "/tweets/:tweetId/likes/",
  authenticateToken,
  tweetAccessVerification,
  async (request, response) => {
    const { tweetId } = request.params;

    const getLikesQuery = `
        select 
            username 
        from 
            user inner join like on user.user_id = like.user_id
        where 
            tweet_id = ${tweetId} ;`;
    const likedUsers = await database.all(getLikesQuery);

    const usersArray = likedUsers.map((eachUser) => eachUser.username);
    response.send({ likes: usersArray });
  }
);

app.get(
  "/tweets/:tweetId/replies/",
  authenticateToken,
  tweetAccessVerification,
  async (request, response) => {
    const { tweetId } = request.params;

    const getRepliedQuery = `
        select 
            name, reply 
        from 
            user inner join reply on user.user_id = reply.user_id
        where 
            tweet.tweet_id = ${tweetId} ;`;
    const repliedUsers = await database.all(getRepliedQuery);

    response.send({ replies: repliedUsers });
  }
);

app.get("/user/tweets/", authenticateToken, async (request, response) => {
  let { username } = request;
  const getTweetsQuery = `
        select 
            tweet.tweet as tweet,
            count(distinct(like.like_id)) as likes,
            count(distinct(reply.reply_id)) as replies,
            tweet.date_time as dateTime
        from tweet left join reply on tweet.tweet_id = reply.tweet_id left join like on tweet.tweet_id = like.tweet_id
        where tweet.user_id = ${user_id}
        group by tweet.tweet_id;`;

  const tweetsDetails = await database.get(getTweetsQuery);
  response.send({ tweetsDetails });
});

app.post("/user/tweets/", authenticateToken, async (request, response) => {
  const { tweet } = request.body;
  const { userId } = parseInt(request.userId);
  const dateTime = new Date().toJSON().substring(0, 19).replace("T", " ");

  const postTweetQuery = `
        insert into 
            tweet(tweet, user_id, date_time)
        values(
            '${tweet}',
            ${user_id},
            '${dateTime}'
        ):    `;
  await database.run(postTweetQuery);
  response.send("Created a Tweet");
});

app.delete(
  "/tweets/:tweetId/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const { userId } = request;
    const selectUserQuery = `
        select * 
        from tweet
        where tweet.user_id = ${userId} and tweet.tweet_id = ${tweetId};`;
    const tweetUser = await database.get(selectUserQuery);

    if (tweetUser === undefined) {
      response.status(401);
      response.send("Invalid Request");
    } else {
      const deleteTweetQuery = `
        delete from tweet
        where tweet_id = ${tweetId};`;
      await database.run(deleteTweetQuery);
      response.send("Tweet Removed");
    }
  }
);

module.exports = app;
